version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: payment-api-postgres
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: payment_user
      POSTGRES_PASSWORD: payment_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payment_user -d payment_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: payment-api-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: payment-api-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infra/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
      - "8888:8888"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "1777:1777"   # pprof extension
    depends_on:
      - jaeger
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: payment-api-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # Jaeger gRPC
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: payment-api-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana
  grafana:
    image: grafana/grafana:10.2.0
    container_name: payment-api-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000" # Grafana UI (3001 para não conflitar com a API)
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - payment-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Payment API (Bun.js)
  payment-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: payment-api-bun
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://payment_user:payment_password@postgres:5432/payment_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
      - JWT_EXPIRES_IN=24h
      - JWT_REFRESH_EXPIRES_IN=7d
      - PORT=3000
      # OpenTelemetry Configuration
      - OTEL_SERVICE_NAME=payment-api
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=payment-api,service.version=1.0.0,deployment.environment=development
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317/v1/traces
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317/v1/metrics
      - OTEL_PROPAGATORS=tracecontext,baggage,b3
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
    networks:
      - payment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Gatling (para testes de carga)
  gatling:
    image: denvazh/gatling:3.10.3
    container_name: payment-api-gatling
    volumes:
      - ./gatling-charts-highcharts-bundle-3.10.3:/opt/gatling
      - ./gatling-results:/opt/gatling/results
    environment:
      - GATLING_SIMULATIONS_DIR=/opt/gatling/user-files/simulations
      - GATLING_RESULTS_DIR=/opt/gatling/results
    networks:
      - payment-network
    profiles:
      - testing # Só executa quando especificado

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  payment-network:
    driver: bridge
